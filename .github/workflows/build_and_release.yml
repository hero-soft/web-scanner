name: Build and Create Release

on:
  push:
  #   branches:
  #     - "main"
  # pull_request:
  #   branches: 
  #     - "*"
  #     - "!main"

jobs:
  # setup-matrix:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     matrix: ${{ steps.set-matrix.outputs.matrix }}
  #   steps:
  #     - id: set-matrix
  #       run: |
  #         TASKS=$(echo $(cat .github/workflows/go-matrix.json) | sed 's/ //g' )
  #         echo 'matrix=$TASKS' >> $GITHUB_OUTPUT

  build-server:
    name: Build Server
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        target:
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
          - os: linux
            arch: 386
          - os: linux
            arch: amd64
          - os: linux
            arch: arm
          - os: linux
            arch: arm64
          - os: windows
            arch: 386
            ext: .exe
          - os: windows
            arch: amd64
            ext: .exe
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: Build server
        run: cd ./server; GOOS="${{ matrix.target.os }}" GOARCH="${{ matrix.target.arch }}" go build -o ../dist/server/web-scanner-${{ matrix.target.os }}-${{ matrix.target.arch }}${{ matrix.target.ext }} .
      - name: Copy server default settings file
        run: cp ./server/settings.toml ./dist/server
      - name: Archive Server
        uses: actions/upload-artifact@v3
        with:
          name: web-scanner-${{ matrix.target.os }}-${{ matrix.target.arch }}
          path: |
            ./dist/server
     
  build-client:
    name: Build client
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Setup Node.js 
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: 'npm'
          cache-dependency-path: "./client/package-lock.json"
      - name: Install dependencies
        run: cd ./client; npm install
      - name: Build client
        run: cd ./client; npm run build-actions
      - name: Archive Client
        uses: actions/upload-artifact@v3
        with:
          name: client
          path: |
            ./dist/client
  
  zip-file:
    name: Zip files
    runs-on: ubuntu-latest
    needs: [build-server, build-client]
    strategy:
      matrix: 
        target:
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
          - os: linux
            arch: 386
          - os: linux
            arch: amd64
          - os: linux
            arch: arm
          - os: linux
            arch: arm64
          - os: windows
            ext: .exe
            arch: 386
          - os: windows
            arch: amd64
            ext: .exe
    steps:
      - name: Download Client
        uses: actions/download-artifact@v3
        with:
          name: client
      - name: Download Server
        uses: actions/download-artifact@v3
        with:
          name: web-scanner-${{ matrix.target.os }}-${{ matrix.target.arch }}
      - run: |
          OUTPATH=./dist/web-scanner-${{ matrix.target.os }}-${{ matrix.target.arch }}/web-scanner
          mkdir -p $OUTPATH
          cp -r ./web-scanner-${{ matrix.target.os }}-${{ matrix.target.arch }} $OUTPATH
          cp -r ./server $OUTPATH
          cp ./dist/server/web-scanner-${{ matrix.target.os }}-${{ matrix.target.arch }} $OUTPATH
          cd ./dist/web-scanner-${{ matrix.target.os }}-${{ matrix.target.arch }}
          zip -r ../../web-scanner-${{ matrix.target.os }}-${{ matrix.target.arch }}.zip ./client ./settings.toml ./web-scanner-${{ matrix.target.os }}-${{ matrix.target.arch }}${{ matrix.target.ext }}
      
  
  # release:
  #   name: release
  #   runs-on: ubuntu-latest
  #   needs: zip-file
  #   steps:
  #     - uses: "marvinpinto/action-automatic-releases@latest"
  #       with:
  #         repo_token: "${{ secrets.GITHUB_TOKEN }}"
  #         automatic_release_tag: "latest"
  #         prerelease: true
  #         title: "Development Build"
  #         files: |
  #           ./dist/web-scanner-*.zip
      
      